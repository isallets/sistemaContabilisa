<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ContabilIsa - Sistema Contábil</title>
  <link rel="stylesheet" href="/style.css">
  <script src="script.js" type="module"></script>
</head>
<body>
  <div class="app-container">
    <aside class="sidebar">
      <div class="sidebar-header">
        <h3>ContabilIsa</h3>
      </div>
      <ul class="menu">
        <li data-page="setup" class="active">Setup de Contas</li>
        <li data-page="livro-diario">Livro Diário</li>
        <li data-page="livro-razao">Livro Razão</li> 
        <li data-page="balancete">Balanço Patrimonial</li>
        <li id="btn-logout" style="color: #f39c12; margin-top: 20px; cursor: pointer;">Sair</li>
      </ul>
    </aside>

    <main class="main-content">
      
      <!-- SETUP DE CONTAS -->
      <section id="page-setup" class="page active">
        <header>
          <h1>Setup de Contas Contábeis</h1>
        </header>
        <div class="container">
          <div class="toolbar">
            <button id="btnAdicionarConta">Adicionar Nova Conta</button>
          </div>
          <table>
            <thead>
              <tr>
                <th>Código</th>
                <th>Nome da Conta</th>
                <th>Grupo Contábil</th>
                <th>Subgrupo 1</th>
                <th>Subgrupo 2</th>
              </tr>
            </thead>
            <tbody id="tabela-contas-corpo"></tbody>
          </table>
        </div>
      </section>

      <!-- LIVRO DIÁRIO -->
      <section id="page-livro-diario" class="page">
        <header>
          <h1>Livro Diário - Lançamentos</h1>
        </header>
        <div class="container">
          <form id="form-novo-lancamento" class="form-lancamento">
            <div class="form-grid">
              <div>
                <label for="conta-debito">Conta Débito:</label>
                <select id="conta-debito" required></select>
              </div>
              <div>
                <label for="conta-credito">Conta Crédito:</label>
                <select id="conta-credito" required></select>
              </div>
              <div>
                <label for="valor">Valor (R$):</label>
                <input type="number" id="valor" step="0.01" required>
              </div>
            </div>
            <label for="historico">Histórico (Descrição):</label>
            <textarea id="historico" rows="3" required></textarea>
            <button type="submit">Salvar Lançamento</button>
          </form>
          <hr style="margin: 2rem 0;">
          <h3>Lançamentos Registrados</h3>
          <table>
            <thead>
              <tr>
                <th>Data</th>
                <th>Histórico</th>
                <th>Conta Débito</th>
                <th>Conta Crédito</th>
                <th>Valor (R$)</th>
              </tr>
            </thead>
            <tbody id="tabela-lancamentos-corpo"></tbody>
          </table>
        </div>
      </section>

      <!-- BALANÇO PATRIMONIAL -->
      <section id="page-balancete" class="page">
        <header>
          <h1>Balanço Patrimonial</h1>
        </header>
        <div class="container">
          <div class="toolbar">
            <button id="btnGerarBalanco">Gerar Balanço</button>
            <span style="margin-left: 1rem;">Data de Referência: <strong id="data-referencia"></strong></span>
          </div>
          <div id="balanco-container" class="balanco-container">
            <div id="lado-ativo" class="balanco-lado">
              <div class="balanco-header">ATIVO</div>
            </div>
            <div id="lado-passivo-pl" class="balanco-lado">
              <div class="balanco-header">PASSIVO E PATRIMÔNIO LÍQUIDO</div>
            </div>
          </div>
        </div>
      </section>

      <!-- LIVRO RAZÃO -->
      <section id="page-livro-razao" class="page">
        <header>
          <h1>Livro Razão</h1>
        </header>
        <div class="container">
          <div class="toolbar" style="display: flex; align-items: center; gap: 1rem;">
            <label for="filtro-conta-razao">Selecionar Conta:</label>
            <select id="filtro-conta-razao" style="flex-grow: 1;"></select>
            <button id="btnGerarRazao">Gerar Razão</button>
          </div>
          <div id="resultado-razao" style="margin-top: 2rem; display: none;">
            <h2 id="nome-conta-razao" style="margin-bottom: 1rem;"></h2>
            <table>
              <thead>
                <tr>
                  <th>Data</th>
                  <th>Histórico</th>
                  <th>Débito (R$)</th>
                  <th>Crédito (R$)</th>
                  <th>Saldo (R$)</th>
                </tr>
              </thead>
              <tbody id="tabela-razao-corpo"></tbody>
              <tfoot id="tabela-razao-rodape"></tfoot>
            </table>
          </div>
        </div>
      </section>
      
    </main>
  </div>

  <!-- MODAL NOVA CONTA -->
  <div id="modal-nova-conta" class="modal">
    <div class="modal-content">
      <span class="close-button">&times;</span>
      <h2>Adicionar Nova Conta</h2>
      <form id="form-nova-conta">
        <label for="codigo">Código:</label><input type="text" id="codigo" required>
        <label for="nome_conta">Nome da Conta:</label><input type="text" id="nome_conta" required>
        <label for="grupo_contabil">Grupo Contábil:</label>
        <select id="grupo_contabil" required>
          <option value="">Selecione...</option>
          <option value="Ativo">Ativo</option>
          <option value="Passivo">Passivo</option>
          <option value="Patrimônio Líquido">Patrimônio Líquido</option>
        </select>
        <label for="subgrupo1">Subgrupo 1:</label><input type="text" id="subgrupo1">
        <label for="subgrupo2">Subgrupo 2:</label><input type="text" id="subgrupo2">
        <button type="submit">Salvar Conta</button>
      </form>
    </div>
  </div>
</body>
</html>
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - ContabilIsa</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif; display: flex; justify-content: center; align-items: center; height: 100vh; background-color: #f0f2f5; margin: 0; }
        .login-card { background: white; padding: 40px; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); text-align: center; max-width: 400px; }
        h1 { color: #2c3e50; margin-bottom: 10px; }
        p { color: #7f8c8d; margin-bottom: 30px; }
        .google-btn { display: inline-flex; align-items: center; background-color: #4285F4; color: white; border: none; padding: 12px 24px; border-radius: 5px; cursor: pointer; font-size: 16px; font-weight: 500; transition: background-color 0.2s; }
        .google-btn:hover { background-color: #357ae8; }
        .google-btn svg { width: 20px; height: 20px; margin-right: 15px; background: white; border-radius: 50%; padding: 2px; }
    </style>
</head>
<body>
    <div class="login-card">
        <h1>ContabilIsa</h1>
        <p>Acesse o sistema de gestão contábil.</p>
        <button id="login-google" class="google-btn">
            <svg viewBox="0 0 48 48"><path fill="#EA4335" d="M24 9.5c3.54 0 6.71 1.22 9.21 3.6l6.85-6.85C35.9 2.38 30.47 0 24 0 14.62 0 6.51 5.38 2.56 13.22l7.98 6.19C12.43 13.72 17.74 9.5 24 9.5z"></path><path fill="#4285F4" d="M46.98 24.55c0-1.57-.15-3.09-.38-4.55H24v9.02h12.94c-.58 2.96-2.26 5.48-4.78 7.18l7.73 6c4.51-4.18 7.09-10.36 7.09-17.65z"></path><path fill="#FBBC05" d="M10.53 28.59c-.48-1.45-.76-2.99-.76-4.59s.27-3.14.76-4.59l-7.98-6.19C.92 16.46 0 20.12 0 24c0 3.88.92 7.54 2.56 10.78l7.97-6.19z"></path><path fill="#34A853" d="M24 48c6.48 0 11.93-2.13 15.89-5.81l-7.73-6c-2.15 1.45-4.92 2.3-8.16 2.3-6.26 0-11.57-4.22-13.47-9.91l-7.98 6.19C6.51 42.62 14.62 48 24 48z"></path><path fill="none" d="M0 0h48v48H0z"></path></svg>
            Entrar com o Google
        </button>
    </div>

    <script src="login.js" type="module"></script>
</body>
</html>// frontend/login.js

// Importa o 'auth' do nosso arquivo de configuração
import { auth } from '../firebase-config.js';
// Importa as funções de login do Firebase
import { GoogleAuthProvider, signInWithPopup, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/10.4.0/firebase-auth.js";

const btnLoginGoogle = document.getElementById('login-google');

// Checa se o usuário JÁ ESTÁ LOGADO
onAuthStateChanged(auth, (user) => {
    if (user) {
        // Se já está logado, redireciona para a página principal
        console.log("Usuário já logado, redirecionando...", user.displayName);
        window.location.href = 'index.html';
    }
});

// Evento de clique para o botão de login
btnLoginGoogle.addEventListener('click', () => {
    const provider = new GoogleAuthProvider();

    signInWithPopup(auth, provider)
        .then((result) => {
            // Login bem-sucedido
            const user = result.user;
            console.log("Login com Google bem-sucedido!", user);
            // Redireciona para a página principal
            window.location.href = 'index.html';
        })
        .catch((error) => {
            // Lida com erros
            console.error("Erro no login com Google:", error);
        });
});import { auth } from '../firebase-config.js';
import { onAuthStateChanged, signOut } from "https://www.gstatic.com/firebasejs/10.4.0/firebase-auth.js";

document.addEventListener('DOMContentLoaded', () => {

  onAuthStateChanged(auth, (user) => {
    if (user) {
        // Usuário está logado! Mostra o nome no console.
        console.log("Acesso permitido para:", user.displayName);
    } else {
        // Usuário não está logado! Redireciona para a tela de login.
        console.log("Acesso negado. Redirecionando para login...");
        window.location.href = 'login.html';
    } 
  });

  const API_URL = '/api';
  let todasAsContas = [];

  // --- ELEMENTOS PRINCIPAIS ---
  const tabelaContasCorpo = document.getElementById('tabela-contas-corpo');
  const modal = document.getElementById('modal-nova-conta');
  const btnAdicionar = document.getElementById('btnAdicionarConta');
  const btnFecharModal = document.querySelector('.close-button');
  const formNovaConta = document.getElementById('form-nova-conta');

  const selectContaDebito = document.getElementById('conta-debito');
  const selectContaCredito = document.getElementById('conta-credito');
  const filtroContaRazao = document.getElementById('filtro-conta-razao');
  const btnGerarRazao = document.getElementById('btnGerarRazao');
  const btnGerarBalanco = document.getElementById('btnGerarBalanco');

  // --- ELEMENTOS DO Balanço Patrimonial ---
  const ladoAtivoDiv = document.getElementById('lado-ativo');
  const ladoPassivoPlDiv = document.getElementById('lado-passivo-pl');
  const dataReferenciaElement = document.getElementById('data-referencia');

  // --- ELEMENTOS DO Livro Razão ---
  const resultadoRazaoDiv = document.getElementById('resultado-razao');
  const nomeContaRazaoH2 = document.getElementById('nome-conta-razao');
  const tabelaRazaoCorpo = document.getElementById('tabela-razao-corpo');
  const tabelaRazaoRodape = document.getElementById('tabela-razao-rodape');

  // --- ELEMENTOS: Livro Diário ---
  const formNovoLancamento = document.getElementById('form-novo-lancamento');
  const tabelaLancamentosCorpo = document.getElementById('tabela-lancamentos-corpo');

  // --- NAVEGAÇÃO ---
  const menuItems = document.querySelectorAll('.menu li');
  const pages = document.querySelectorAll('.page');

  function showPage(pageId) {
    pages.forEach(p => p.classList.remove('active'));
    menuItems.forEach(i => i.classList.remove('active'));
    document.getElementById(`page-${pageId}`)?.classList.add('active');
    document.querySelector(`.menu li[data-page="${pageId}"]`)?.classList.add('active');
  }

  // --- CONTAS ---
  async function carregarContas() {
    try {
      const response = await fetch(`${API_URL}/contas`);
      todasAsContas = await response.json();
      tabelaContasCorpo.innerHTML = '';
      todasAsContas.forEach(c => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td>${c.codigo}</td>
          <td>${c.nome_conta}</td>
          <td>${c.grupo_contabil}</td>
          <td>${c.subgrupo1}</td>
          <td>${c.subgrupo2}</td>
        `;
        tabelaContasCorpo.appendChild(tr);
      });
    } catch (e) {
      console.error('Erro ao carregar contas:', e);
    }
  }

  function toggleModal() {
    modal.style.display = (modal.style.display === 'block') ? 'none' : 'block';
  }

  formNovaConta.addEventListener('submit', async e => {
    e.preventDefault();
    const novaConta = {
      codigo: document.getElementById('codigo').value,
      nome_conta: document.getElementById('nome_conta').value,
      grupo_contabil: document.getElementById('grupo_contabil').value,
      subgrupo1: document.getElementById('subgrupo1').value,
      subgrupo2: document.getElementById('subgrupo2').value
    };

    try {
      const response = await fetch(`${API_URL}/contas`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(novaConta)
      });
      if (!response.ok) throw new Error('Erro ao criar conta');
      const contaCriada = await response.json();

      todasAsContas.push(contaCriada);
      formNovaConta.reset();
      toggleModal();
      await carregarContas();
      await popularDropdownsContas();
    } catch (e) {
      console.error('Erro ao criar conta:', e);
      alert('Não foi possível salvar a conta.');
    }
  });

  // --- DROPDOWNS ---
  async function popularDropdownsContas() {
    selectContaDebito.innerHTML = '<option value="">Selecione...</option>';
    selectContaCredito.innerHTML = '<option value="">Selecione...</option>';
    filtroContaRazao.innerHTML = '<option value="">Selecione uma conta...</option>';

    todasAsContas.forEach(c => {
      const option = `<option value="${c.id}">${c.codigo} - ${c.nome_conta}</option>`;
      selectContaDebito.innerHTML += option;
      selectContaCredito.innerHTML += option;
      filtroContaRazao.innerHTML += option;
    });
  }

  // --- LANÇAMENTOS ---
  async function carregarLancamentos() {
    try {
      const response = await fetch(`${API_URL}/lancamentos`);
      const lancamentos = await response.json();
      tabelaLancamentosCorpo.innerHTML = '';

      lancamentos.forEach(l => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td>${l.data}</td>
          <td>${l.historico}</td>
          <td>${l.nomeContaDebito}</td>
          <td>${l.nomeContaCredito}</td>
          <td>${l.valor.toFixed(2)}</td>
        `;
        tabelaLancamentosCorpo.appendChild(tr);
      });
    } catch (e) {
      console.error('Erro ao carregar lançamentos:', e);
    }
  }

  formNovoLancamento.addEventListener('submit', async e => {
    e.preventDefault();
    const novoLancamento = {
      contaDebitoId: document.getElementById('conta-debito').value,
      contaCreditoId: document.getElementById('conta-credito').value,
      valor: document.getElementById('valor').value,
      historico: document.getElementById('historico').value
    };

    try {
      const response = await fetch(`${API_URL}/lancamentos`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(novoLancamento)
      });
      if (!response.ok) throw new Error('Erro ao salvar lançamento');

      formNovoLancamento.reset();
      await carregarLancamentos();
    } catch (e) {
      console.error('Erro ao salvar lançamento:', e);
      alert('Não foi possível salvar o lançamento.');
    }
  });

  async function gerarLivroRazao() {
    const contaId = filtroContaRazao.value;
    if (!contaId) {
      alert('Por favor, selecione uma conta para gerar o razão.');
      return;
    }

    try {
      const response = await fetch(`${API_URL}/livro-razao/${contaId}`);
      if (!response.ok) throw new Error('Erro ao buscar dados do razão.');

      const dadosRazao = await response.json();
      
      // Coloca o título com o nome da conta selecionada
      nomeContaRazaoH2.textContent = `Razão da Conta: ${dadosRazao.conta.codigo} - ${dadosRazao.conta.nome_conta}`;
      tabelaRazaoCorpo.innerHTML = ''; // Limpa a tabela
      
      let saldoCorrente = 0; // Variável para calcular o saldo a cada linha
      
      // Cria uma linha <tr> para cada movimento da conta
      dadosRazao.movimentos.forEach(mov => {
        saldoCorrente += mov.credito - mov.debito;
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td>${mov.data}</td>
          <td>${mov.historico}</td>
          <td>${mov.debito > 0 ? mov.debito.toFixed(2) : '-'}</td>
          <td>${mov.credito > 0 ? mov.credito.toFixed(2) : '-'}</td>
          <td>${saldoCorrente.toFixed(2)}</td>
        `;
        tabelaRazaoCorpo.appendChild(tr);
      });

      // Cria o rodapé da tabela com os totais
      tabelaRazaoRodape.innerHTML = `
        <tr>
          <td colspan="2">TOTAIS DO PERÍODO</td>
          <td>${dadosRazao.totalDebito.toFixed(2)}</td>
          <td>${dadosRazao.totalCredito.toFixed(2)}</td>
          <td><strong>${dadosRazao.saldoFinal.toFixed(2)}</strong></td>
        </tr>
      `;

      // Mostra a div de resultados que estava escondida
      resultadoRazaoDiv.style.display = 'block';

    } catch(error) {
      console.error('Erro ao gerar Livro Razão:', error);
      alert('Não foi possível gerar o relatório do Livro Razão.');
    }
  }

  // Função para renderizar contas e retornar HTML e soma dos saldos
function renderizarContasLista(contas, grupoPai) {
  let html = '';
  let total = 0;
  
  contas.forEach(conta => {
    html += `<div class="balanco-conta"><span>${conta.nome_conta}</span><span>${conta.saldo.toFixed(2)}</span></div>`;
    total += conta.saldo;
  });

  return { html, total };
}

// Função que usa a função acima para renderizar grupos e subgrupos
function renderizarGrupos(grupos, grupoPai) {
  let html = '';
  let total = 0;
  const chavesGrupos = Object.keys(grupos);

  chavesGrupos.forEach(chaveGrupo => {
    html += `<div class="balanco-grupo-titulo">${chaveGrupo}</div>`;
    const subgrupos = grupos[chaveGrupo];
    const chavesSubgrupos = Object.keys(subgrupos);

    chavesSubgrupos.forEach(chaveSubgrupo => {
      if (chaveSubgrupo && chaveSubgrupo.trim() !== '') {
        html += `<div class="balanco-subgrupo-titulo">&nbsp;&nbsp;<strong>${chaveSubgrupo}</strong></div>`;
      }
      let contas = subgrupos[chaveSubgrupo];
      
      if (!Array.isArray(contas)) {
        if (contas && typeof contas === 'object') {
          contas = [contas];  // transforma objeto único em array com 1 elemento
        } else {
          console.warn('Contas não é um array nem objeto válido, ignorando:', contas);
          contas = [];
        }
      }

      const resultadoContas = renderizarContasLista(contas, grupoPai);
      html += resultadoContas.html;
      total += resultadoContas.total;
    });
  });

  return { html, total };
}


// Função async para buscar dados e renderizar o balanço
async function renderizarContas() {
  const response = await fetch('/api/balanco-patrimonial');
  if (!response.ok) {
    console.error("Erro ao buscar balanco patrimonial");
    return;
  }
  const data = await response.json();

  const container = document.getElementById('balanco-container');
  container.innerHTML = '';

  // Renderiza Ativo
  const ativoResultado = renderizarGrupos(data.ativo, 'ativo');
  const ladoAtivo = document.createElement('div');
  ladoAtivo.classList.add('balanco-lado');
  ladoAtivo.innerHTML = `<div class="balanco-header">ATIVO</div>` + ativoResultado.html;

  // Renderiza Passivo e Patrimônio Líquido
  const passivoPlResultado = renderizarGrupos({
    ...data.passivo,
    "Patrimônio Líquido": data.patrimonioLiquido
  }, 'passivo-pl');

  const ladoPassivoPl = document.createElement('div');
  ladoPassivoPl.classList.add('balanco-lado');
  ladoPassivoPl.innerHTML = `<div class="balanco-header">PASSIVO E PATRIMÔNIO LÍQUIDO</div>` + passivoPlResultado.html;

  container.appendChild(ladoAtivo);
  container.appendChild(ladoPassivoPl);
}

   
  async function gerarBalancoPatrimonial() {
    try {
      const response = await fetch(`${API_URL}/balanco-patrimonial`);
      const relatorio = await response.json();
      
      // Chama a função auxiliar para desenhar o lado do ATIVO
      const resultadoAtivo = renderizarGrupos(relatorio.ativo, 'Ativo');
      ladoAtivoDiv.innerHTML = `<div class="balanco-header">ATIVO</div><div class="balanco-grupo">${resultadoAtivo.html}</div><div class="balanco-total"><span>TOTAL ATIVO</span><span>${resultadoAtivo.total.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</span></div>`;
      
      // Chama a função auxiliar para desenhar o lado do PASSIVO e do PL
      const resultadoPassivo = renderizarGrupos(relatorio.passivo, 'Passivo');
      const resultadoPL = renderizarGrupos(relatorio.patrimonioLiquido, 'Patrimônio Líquido');
      const totalPassivoPL = resultadoPassivo.total + resultadoPL.total;
      ladoPassivoPlDiv.innerHTML = `<div class="balanco-header">PASSIVO E PATRIMÔNIO LÍQUIDO</div><div class="balanco-grupo">${resultadoPassivo.html}</div><div class="balanco-grupo">${resultadoPL.html}</div><div class="balanco-total"><span>TOTAL PASSIVO + PL</span><span>${totalPassivoPL.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</span></div>`;
    
    } catch (error) { 
        console.error('Erro ao gerar Balanço Patrimonial:', error); 
    }
  }

  // --- INICIALIZAÇÃO ---
  function inicializar() {
    menuItems.forEach(item =>
      item.addEventListener('click', () => showPage(item.dataset.page))
    );
    btnAdicionar.addEventListener('click', toggleModal);
    btnFecharModal.addEventListener('click', toggleModal);
    btnGerarBalanco.addEventListener('click', gerarBalancoPatrimonial);
    btnGerarRazao.addEventListener('click', gerarLivroRazao);

    carregarContas().then(popularDropdownsContas);
    carregarLancamentos();

    showPage('setup');

    const btnLogout = document.getElementById('btn-logout');
    if (btnLogout) {
        btnLogout.addEventListener('click', () => {
            signOut(auth).then(() => {
                console.log("Logout bem-sucedido.");
                // A página irá recarregar e o "porteiro" fará o redirecionamento.
            }).catch(error => {
                console.error("Erro no logout:", error);
            });
        });
    }
  }
  if (dataReferenciaElement) {
    const hoje = new Date();
    const dia = String(hoje.getDate()).padStart(2, '0');
    const mes = String(hoje.getMonth() + 1).padStart(2, '0'); // Mês começa em 0, então somamos 1
    const ano = hoje.getFullYear();
    dataReferenciaElement.textContent = `${dia}/${mes}/${ano}`;
}

  inicializar();
});


  
/* Reset Básico e Estilos Gerais */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  background-color: #f0f2f5;
  color: #333;
}

/* Layout Principal da Aplicação */
.app-container {
  display: flex;
  height: 100vh;
}

/* Barra de Menu Lateral */
.sidebar {
  width: 240px;
  background-color: #2c3e50;
  color: #ecf0f1;
  display: flex;
  flex-direction: column;
}

.sidebar-header {
  padding: 20px;
  text-align: center;
  font-size: 1.5rem;
  font-weight: bold;
  border-bottom: 1px solid #34495e;
}

.menu {
  list-style: none;
  margin-top: 20px;
}

.menu li {
  padding: 15px 20px;
  cursor: pointer;
  border-left: 3px solid transparent;
  transition: all 0.2s ease-in-out;
}

.menu li:hover {
  background-color: #34495e;
}

.menu li.active {
  background-color: #3498db;
  border-left: 3px solid #ecf0f1;
  font-weight: bold;
}

/* Área de Conteúdo Principal */
.main-content {
  flex-grow: 1; /* Ocupa o resto do espaço */
  padding: 2rem;
  overflow-y: auto; /* Adiciona scroll se o conteúdo for grande */
}

.main-content header {
  border-bottom: 1px solid #ddd;
  padding-bottom: 1rem;
  margin-bottom: 2rem;
}

.main-content header h1 {
  font-size: 2rem;
  color: #2c3e50;
}

/* Páginas (Seções de Conteúdo) */
.page {
  display: none; /* Todas as páginas começam escondidas */
}
.page.active {
  display: block; /* Apenas a página ativa é exibida */
}

/* Reutilização de estilos antigos */
.container, .form-lancamento {
  background: white;
  padding: 2rem;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.05);
}
.toolbar { margin-bottom: 1rem; }
button {
  background-color: #3498db; color: white; border: none; padding: 10px 15px;
  border-radius: 5px; cursor: pointer; font-size: 16px;
}
button:hover { background-color: #2980b9; }
table { width: 100%; border-collapse: collapse; margin-top: 1rem; }
th, td { border: 1px solid #ddd; padding: 12px; text-align: left; }
thead { background-color: #f7f9fa; }
hr { border: none; border-top: 1px solid #eee; }

/* Modal */
.modal{display:none;position:fixed;z-index:1;left:0;top:0;width:100%;height:100%;overflow:auto;background-color:rgba(0,0,0,0.5)}.modal-content{background-color:#fefefe;margin:10% auto;padding:20px;border:1px solid #888;width:80%;max-width:500px;border-radius:8px}.close-button{color:#aaa;float:right;font-size:28px;font-weight:bold}.close-button:hover,.close-button:focus{color:black;text-decoration:none;cursor:pointer}form label{display:block;margin-top:1rem}form input,form select,form textarea{width:100%;padding:8px;margin-top:5px;box-sizing:border-box}form button{margin-top:1.5rem;width:100%}

/* Estilos para o formulário de lançamento  */
.form-lancamento{margin-top:0}.form-grid{display:grid;grid-template-columns:1fr 1fr 0.5fr;gap:1rem;margin-bottom:1rem}.form-lancamento button{width:auto;margin-top:1rem}

/* Estilo para o rodapé da tabela de balancete */
tfoot {
  font-weight: bold;
  border-top: 2px solid #333;
}

/* Estilos para o Balanço Patrimonial */
.balanco-container {
  display: flex;
  gap: 2rem;
  margin-top: 2rem;
  border: 1px solid #ddd;
}

.balanco-lado {
  flex: 1; /* Faz com que cada lado ocupe 50% do espaço */
}

.balanco-header {
  background-color: #ecf0f1;
  padding: 10px;
  font-weight: bold;
  text-align: center;
  border-bottom: 1px solid #ddd;
}

.balanco-grupo {
  padding: 10px;
}

.balanco-grupo-titulo {
  font-weight: bold;
  margin-top: 10px;
}

.balanco-conta {
  display: flex;
  justify-content: space-between;
  padding: 5px 10px;
}

.balanco-total {
  display: flex;
  justify-content: space-between;
  padding: 10px;
  font-weight: bold;
  border-top: 1px solid #ccc;
  margin-top: 10px;
  background-color: #f7f9fa;
}